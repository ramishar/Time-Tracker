{/* Start card */}
      {/* <div className="card">
          <div className="overlap">
            <div className="card-header">
              <p className="p">Adding animations to the Website</p>
              <div className="button">
                <div className="overlap-group">
                  <div className="text-wrapper-3">Start</div>
                </div>
              </div>
              <div className="delete-button">
                <div className="div-wrapper">
                  <div className="text-wrapper-4">X</div>
                </div>
              </div>
              <div className="rectangle" />
              <p className="text-wrapper-5">00 : 00 : 00</p>
            </div>
            <div className="text-wrapper-6">History</div>
            <p className="text-wrapper-7">No History Found, Click on the start button to track the timer</p>
          </div>
        </div>
   */}
     {/* End card */}
    {/* {tasks.map((task, index) => (
      <div className="overlap-wrapper">
          <div className="overlap">
            <div className="card-header">
              <p className="p">{task.taskName}</p>
              <div className="button">
                <div className="overlap-group">
                  <div className="text-wrapper-3">{!timer ? (
          <button onClick={startTimer}>Start Timer</button>
        ) : (
          <button onClick={stopTimer}>Stop Timer</button>
        )}</div>
                </div>
              </div>
              <div className="rectangle" />
              <p className="text-wrapper-5">{moment.utc(task.duration * 1000).format('HH:mm:ss')}</p>
              <div className="delete-button">
                <div className="div-wrapper">
                  <div className="text-wrapper-4"><button onClick={() => deleteTask(index)}>X</button></div>
                </div>
              </div>
            </div>
            <div className="text-wrapper-6">History</div>
            <p className="text-wrapper-7">No History Found, Click on the start button to track the timer</p>
          </div>
        </div>
    ))} */}
    {/* <div>
        <input
          type="text"
          value={currentTask}
          onChange={(e) => setCurrentTask(e.target.value)}
          placeholder="Enter task name"
        />
        {!timer ? (
          <button onClick={startTimer}>Start Timer</button>
        ) : (
          <button onClick={stopTimer}>Stop Timer</button>
        )}
      </div> */}
        {/* <div>
        <ul>
          {tasks.map((task, index) => (
            <li key={index}>
              <span>{task.taskName}</span>
              <span>
                {moment.utc(task.duration * 1000).format('HH:mm:ss')}
              </span>
              <button onClick={() => deleteTask(index)}>Delete</button>
            </li>
          ))}
        </ul>
      </div> */}


      /* .card {
  height: 169px;
  left: 140px;
  position: absolute;
  top: 90px;
  width: 1004px;
}

 .overlap {
  background-image: url(https://generation-sessions.s3.amazonaws.com/0960e2881e68e4982ebb1b29c32117aa/img/rectangle-2.png);
  border-radius: var(--card-radius);
  box-shadow: var(--card-box-shadow);
  background-size: 100% 100%;
  height: 185px;
  left: -3px;
  position: relative;
  top: -3px;
  width: 1016px;
}
 .card-header {
  height: 42px;
  left: 28px;
  position: absolute;
  top: 27px;
  width: 958px;
}

 .p {
  color: #000000e6;
  font-family: "Inter", Helvetica;
  font-size: var(--heading-font-size);
  font-weight: 500;
  left: 0;
  letter-spacing: 0;
  line-height: normal;
  position: absolute;
  top: 8px;
  white-space: nowrap;
}

 .button {
  height: 40px;
  left: 765px;
  position: absolute;
  top: 0;
  width: 138px;
}

.overlap-group {
  background-color: #4f56ec;
  border-radius: 57px;
  height: 40px;
  position: relative;
  width: 136px;
}

 .text-wrapper-3 {
  color: #ffffff;
  font-family: "Inter", Helvetica;
  font-size: 16px;
  font-weight: 600;
  left: 49px;
  letter-spacing: 0;
  line-height: normal;
  position: absolute;
  top: 11px;
  white-space: nowrap;
}

.delete-button {
  height: 40px;
  left: 914px;
  position: absolute;
  top: 0;
  width: 42px;
}

.div-wrapper {
  background-color: #d9d9d9;
  border-radius: 20px;
  height: 40px;
  position: relative;
  width: 40px;
}

 .text-wrapper-4 {
  color: #00000099;
  font-family: "Inter", Helvetica;
  font-size: 16px;
  font-weight: 600;
  left: 15px;
  letter-spacing: 0;
  line-height: normal;
  position: absolute;
  top: 11px;
  white-space: nowrap;
}

 .rectangle {
  background-color: #d9d9d9;
  height: 40px;
  left: 568px;
  position: absolute;
  top: 2px;
  width: 2px;
}

 .text-wrapper-5 {
  color: #4f56ec;
  font-family: "Inter", Helvetica;
  font-size: 20px;
  font-weight: 500;
  left: 596px;
  letter-spacing: 0;
  line-height: normal;
  position: absolute;
  top: 8px;
  white-space: nowrap;
}

.text-wrapper-6 {
  color: #000000;
  font-family: "Inter", Helvetica;
  font-size: 16px;
  font-weight: 500;
  left: 29px;
  letter-spacing: 0;
  line-height: normal;
  position: absolute;
  top: 81px;
  white-space: nowrap;
}

.text-wrapper-7 {
  color: #000000cc;
  font-family: "Inter", Helvetica;
  font-size: 16px;
  font-weight: 400;
  left: 29px;
  letter-spacing: 0;
  line-height: normal;
  position: absolute;
  top: 112px;
  white-space: nowrap;
}

.overlap-wrapper {
  height: 196px;
  left: 142px;
  position: absolute;
  top: 289px;
  width: 1006px;
} */

/* .overlap-wrapper {
  height: 196px;
  left: 142px;
  position: absolute;
  top: 289px;
  width: 1006px;
}

 .overlap-2 {
  background-color: #ffffff;
  border-radius: 25px;
  box-shadow: 5px 5px 8px #0000001a;
  height: 196px;
  position: relative;
  width: 1000px;
}

.card-header-2 {
  height: 42px;
  left: 25px;
  position: absolute;
  top: 24px;
  width: 956px;
}

 .overlap-group-wrapper {
  height: 40px;
  left: 763px;
  position: absolute;
  top: 1px;
  width: 138px;
}

.overlap-group-2 {
  background-color: #ec4f4f;
  border-radius: 57px;
  height: 40px;
  position: relative;
  width: 136px;
} */

  // const startTimer = () => {
  //   const startTime = moment();
  //   setTimer(startTime);
  // };

  // const stopTimer = () => {
  //   if (!timer) return;

  //   const endTime = moment();
  //   const duration = moment.duration(endTime.diff(timer));
  //   const newTask = {
  //     taskName: currentTask,
  //     duration: duration.asSeconds(),
  //     startTime: timer,
  //     endTime: endTime,
  //   };

  //   setTasks([...tasks, newTask]);
  //   setCurrentTask('');
  //   setTimer(null);
  //   setTotalTime(totalTime + duration.asSeconds());
  // };

  // const handleToggle = (index) => {
  //   const updatedTasks = [...tasks];
  //   const task = updatedTasks[index];

  //   if (task.timer) {
  //     clearInterval(task.timer);
  //     delete task.timer;
  //   } else {
  //     task.timer = setInterval(() => {
  //       task.duration += 1;
  //       setTasks([...updatedTasks]);
  //     }, 1000);
  //   }

  //   setTasks(updatedTasks);
  // };


// const Card = ({ taskName, duration, isRunning, onToggle, onDelete }) => {
//   return (
//     <div className="card">
//       <div className="card-header">
//         <p className="task-name">{taskName}</p>
//         <p className="duration">{duration}</p>
//         <button className="toggle-button" onClick={onToggle}>
//           {isRunning ? 'Stop' : 'Start'}
//         </button>
//         <button className="delete-button" onClick={onDelete}>X</button>
//       </div>
      
//     </div>
//   );
// };